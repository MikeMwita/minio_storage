// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: service_mutation.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MutationService_UploadFile_FullMethodName   = "/pb.MutationService/UploadFile"
	MutationService_CreateBucket_FullMethodName = "/pb.MutationService/CreateBucket"
	MutationService_RemoveBucket_FullMethodName = "/pb.MutationService/RemoveBucket"
)

// MutationServiceClient is the client API for MutationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MutationServiceClient interface {
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error)
	RemoveBucket(ctx context.Context, in *RemoveBucketRequest, opts ...grpc.CallOption) (*RemoveBucketResponse, error)
}

type mutationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMutationServiceClient(cc grpc.ClientConnInterface) MutationServiceClient {
	return &mutationServiceClient{cc}
}

func (c *mutationServiceClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, MutationService_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutationServiceClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error) {
	out := new(CreateBucketResponse)
	err := c.cc.Invoke(ctx, MutationService_CreateBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutationServiceClient) RemoveBucket(ctx context.Context, in *RemoveBucketRequest, opts ...grpc.CallOption) (*RemoveBucketResponse, error) {
	out := new(RemoveBucketResponse)
	err := c.cc.Invoke(ctx, MutationService_RemoveBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MutationServiceServer is the server API for MutationService service.
// All implementations must embed UnimplementedMutationServiceServer
// for forward compatibility
type MutationServiceServer interface {
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error)
	RemoveBucket(context.Context, *RemoveBucketRequest) (*RemoveBucketResponse, error)
	mustEmbedUnimplementedMutationServiceServer()
}

// UnimplementedMutationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMutationServiceServer struct {
}

func (UnimplementedMutationServiceServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedMutationServiceServer) CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedMutationServiceServer) RemoveBucket(context.Context, *RemoveBucketRequest) (*RemoveBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBucket not implemented")
}
func (UnimplementedMutationServiceServer) mustEmbedUnimplementedMutationServiceServer() {}

// UnsafeMutationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MutationServiceServer will
// result in compilation errors.
type UnsafeMutationServiceServer interface {
	mustEmbedUnimplementedMutationServiceServer()
}

func RegisterMutationServiceServer(s grpc.ServiceRegistrar, srv MutationServiceServer) {
	s.RegisterService(&MutationService_ServiceDesc, srv)
}

func _MutationService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MutationService_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServiceServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MutationService_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MutationService_CreateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServiceServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MutationService_RemoveBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutationServiceServer).RemoveBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MutationService_RemoveBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutationServiceServer).RemoveBucket(ctx, req.(*RemoveBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MutationService_ServiceDesc is the grpc.ServiceDesc for MutationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MutationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MutationService",
	HandlerType: (*MutationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _MutationService_UploadFile_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _MutationService_CreateBucket_Handler,
		},
		{
			MethodName: "RemoveBucket",
			Handler:    _MutationService_RemoveBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_mutation.proto",
}
